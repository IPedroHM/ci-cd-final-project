# ---------- Task: Cleanup ----------
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        if [ -d "${WORKSPACE_SOURCE_PATH}" ]; then
          rm -rf "${WORKSPACE_SOURCE_PATH}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi

---

# ---------- Task: Flake8 ----------
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8
spec:
  workspaces:
    - name: source
  steps:
    - name: run-flake8
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install flake8
        flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

---

# ---------- Task: Nose ----------
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)

---

# ---------- Pipeline ----------
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: full-ci-pipeline
spec:
  workspaces:
    - name: source
  params:
    - name: app-name
      type: string
      default: my-app
    - name: build-image
      type: string
      default: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/my-image:latest
  tasks:
    - name: cleanup
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: source

    - name: git-clone
      runAfter: [cleanup]
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: "https://github.com/<SEU_REPOSITORIO>"
        - name: deleteExisting
          value: "true"

    - name: flake8
      runAfter: [git-clone]
      taskRef:
        name: flake8
      workspaces:
        - name: source
          workspace: source

    - name: nose
      runAfter: [flake8]
      taskRef:
        name: nose
      workspaces:
        - name: source
          workspace: source
      params:
        - name: args
          value: "-v --with-spec --spec-color --with-coverage --cover-package=app"

    - name: buildah
      runAfter: [nose]
      taskRef:
        name: buildah
        kind: ClusterTask
      workspaces:
        - name: source
          workspace: source
      params:
        - name: IMAGE
          value: $(params.build-image)

  finally:
    - name: deploy
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -

---

# ---------- PipelineRun ----------
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: full-ci-pipeline-run
spec:
  pipelineRef:
    name: full-ci-pipeline
  params:
    - name: app-name
      value: my-app
    - name: build-image
      value: image-registry.openshift-image-registry.svc:5000/sn-labs-manvig1/my-image:latest
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: my-source-pvc
